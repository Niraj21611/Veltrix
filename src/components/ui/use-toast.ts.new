"use client"

import * as React from "react"

type ToastVariant = "default" | "destructive" | "success" | "warning" | "info"

interface Toast {
  id: string
  title?: string
  description?: string
  variant?: ToastVariant
  duration?: number
}

// Create a context for the toast
const ToastContext = React.createContext<{
  toasts: Toast[]
  addToast: (toast: Omit<Toast, "id">) => void
  removeToast: (id: string) => void
}>({
  toasts: [],
  addToast: () => {},
  removeToast: () => {},
})

// Create a provider component
export function ToastProvider({ children }: { children: React.ReactNode }) {
  const [toasts, setToasts] = React.useState<Toast[]>([])

  const addToast = React.useCallback((toast: Omit<Toast, "id">) => {
    const id = Math.random().toString(36).substring(2, 9)
    setToasts((prev) => [...prev, { id, ...toast }])

    if (toast.duration !== Number.POSITIVE_INFINITY) {
      setTimeout(() => {
        setToasts((prev) => prev.filter((t) => t.id !== id))
      }, toast.duration || 5000)
    }
  }, [])

  const removeToast = React.useCallback((id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id))
  }, [])

  return <ToastContext.Provider value={{ toasts, addToast, removeToast }}>{children}</ToastContext.Provider>
}

// Create a hook to use the toast
export function useToast() {
  const context = React.useContext(ToastContext)
  if (!context) {
    throw new Error("useToast must be used within a ToastProvider")
  }
  return context
}

// Create a global toast function
let toastFn: ((toast: Omit<Toast, "id">) => void) | null = null

export function setToastFunction(fn: (toast: Omit<Toast, "id">) => void) {
  toastFn = fn
}

// Create a toast function
export const toast = (props: Omit<Toast, "id">) => {
  if (toastFn) {
    toastFn(props)
  }
}

// Initialize the toast function
export function ToastInit() {
  const { addToast } = useToast()

  React.useEffect(() => {
    setToastFunction(addToast)
    return () => setToastFunction(() => {})
  }, [addToast])

  return null
}

// Define our own Toaster component instead of importing it
export function Toaster() {
  const { toasts, removeToast } = useToast()

  if (toasts.length === 0) return null

  return (
    <div className="fixed top-0 right-0 z-50 flex flex-col gap-2 p-4 max-h-screen overflow-hidden">
      {toasts.map((toast) => (
        <div
          key={toast.id}
          className={`bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 transition-all duration-300 ease-in-out transform translate-x-0 max-w-md ${
            toast.variant === "destructive"
              ? "border-l-4 border-red-500"
              : toast.variant === "success"
                ? "border-l-4 border-green-500"
                : toast.variant === "warning"
                  ? "border-l-4 border-yellow-500"
                  : toast.variant === "info"
                    ? "border-l-4 border-blue-500"
                    : "border-l-4 border-gray-500"
          }`}
        >
          <div className="flex justify-between items-start">
            <div>
              {toast.title && <h3 className="font-semibold text-gray-900 dark:text-gray-100">{toast.title}</h3>}
              {toast.description && (
                <p className="text-sm text-gray-700 dark:text-gray-300 mt-1">{toast.description}</p>
              )}
            </div>
            <button
              onClick={() => removeToast(toast.id)}
              className="ml-4 text-gray-400 hover:text-gray-500 focus:outline-none"
            >
              Ã—
            </button>
          </div>
        </div>
      ))}
    </div>
  )
}
